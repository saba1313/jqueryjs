<?php
// $Id: formtweaker.module,v 1.7 2007/02/16 00:51:08 pancho Exp $

/**
 * Implementation of hook_form_alter()
 */
function formtweaker_form_alter($form_id, &$form) {
  $type = (isset($form['type']) && isset($form['type']['#value'])) ? $form['type']['#value'] : NULL;
  $node = isset($form['#node']) ? $form['#node'] : NULL;

  // Set defaults    
  $defaults = array();  
  if (module_exists('taxonomy')) {
    $defaults['taxonomy']['style'] = 'select';
    $defaults['taxonomy'][0]['style'] = 'default';
    $taxonomy_module = 1;
  }
  if (module_exists('category')) {
    $category_module = 1;
    $terminology = array (
      'vocabulary' => t('container'),
      'vocabularies' => t('containers'),
      'term' => t('category'),
      'terms' => t('categories')
    );
  } else {
    $terminology = array (
      'vocabulary' => t('vocabulary'),
      'vocabularies' => t('vocabularies'),
      'term' => t('term'),
      'terms' => t('terms')
    );
  }

  switch ($form_id) {
    
    // node settings form
    case 'node_type_form':
    
      // Get settings variable from database
      $nodetype = $form['old_type']['#value'];
      $var = variable_get("formtweaker_$nodetype", NULL);
      
      // Add submit handler
      $form['#submit']['_formtweaker_submit'] = array();
      
      // Move buttons down
      $form['submit']['#weight'] = 7;
      $form['delete']['#weight'] = 8;
      
      if ($taxonomy_module) {
      
        $vocabs = taxonomy_get_vocabularies($nodetype);
        if (isset($vocabs)) {
          
          $form['formtweaker'] = array(
            '#type' => 'fieldset',
            '#title' => t('Form Tweaker'),
            '#weight' => 1,
            '#collapsible' => TRUE,
            '#tree' => TRUE
            );
          $form['formtweaker']['taxonomy']['style'] = array(
            '#type' => 'radios',
            '#title' => t('@vocabularies default style', array('@vocabularies' => ucfirst($terminology['vocabularies']))),
            '#weight' => -100,
            '#default_value' => _formtweaker_checkvar($var['taxonomy']['style'], $defaults['taxonomy']['style']),
            '#description' => t('Choose a display style for all @vocabularies in this nodetype',
              array('@vocabularies' => $terminology['vocabularies'])),
            '#options' => array(
              'select' => 'Select',
              'radios' => 'Radios/Checkboxes',
              ),
          );
          
          foreach ($vocabs as $vid => $vocab) {
              
            $form['formtweaker']['taxonomy'][$vid] = array(
              '#type' => 'fieldset',
              '#title' => t('@vocabulary @name', array('@vocabulary' => ucfirst($terminology['vocabulary']), '@name' => $vocab->name)),
              '#weight' => $vocab->weight,
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
            );
            
            $options = array(
              'default' => 'Default',
              'select' => 'Select'
            );
            if ($vocab->multiple == 1) {
              $options['radios'] = 'Checkboxes';
            } else {
              $options['radios'] = 'Radios';
            }            
            
            $form['formtweaker']['taxonomy'][$vid]['style'] = array(
              '#type' => 'radios',
              '#title' => t('Style'),
              '#default_value' => _formtweaker_checkvar($var['taxonomy'][$vid]['style'], $defaults['taxonomy'][0]['style']),
              '#description' => t('Choose a display style for this specific @vocabulary', array('@vocabulary' => $terminology['vocabulary'])),
              '#options' => $options,
            );
          } // end foreach
        }
      }
      break; // end case
      
    // node edit form
    case $type .'_node_form':
    
      // Get settings variable from database
      $var = variable_get("formtweaker_$type", NULL);

      if (is_array($form['category'])) {
        $taxonomy_section = 'category';
      } else if (is_array($form['taxonomy'])) {
        $taxonomy_section = 'taxonomy';
      } 
  
      if (isset($taxonomy_section)) {
        foreach ($form[$taxonomy_section] as $vid => $taxonomy) {
          if (is_numeric($vid)) {
            
            // Fix category.module's bug #116683
            if ($taxonomy_section == 'category') {
              $vocab = taxonomy_get_vocabulary($vid);
              $form[$taxonomy_section][$vid]['#required'] = $vocab['required'];
              unset($vocab);
            }

            if (_formtweaker_checkvar($var['taxonomy'][$vid]['style'], $defaults['taxonomy']['style']) == 'radios') {
              
              // Modify Selectbox
              $form[$taxonomy_section][$vid] = _formtweaker_modify_select($form[$taxonomy_section][$vid]);
            }
          }
        } // end foreach
        $form[$taxonomy_section]['#prefix'] = '<div class="taxonomy-form">';
        $form[$taxonomy_section]['#suffix'] = '</div>';
      }
      unset($taxonomy_section);
      break; //end case
      
    } // end switch
} // end function

function _formtweaker_checkvar($var, $default) {
  if (isset($var)) {
    return $var;
  }
  return $default;
}

function _formtweaker_submit($form_id, $form_values){
  if ($form_id == 'node_type_form') {
    variable_set('formtweaker_' . $form_values['old_type'], $form_values['formtweaker']);
  }
}

function _formtweaker_modify_select($element) {
  // Convert options from objects to arrays
  // as checkboxes and options (unlike select) don't take objects
  $element['#options'] = _formtweaker_obj2arr($element['#options']);
  
  if ($element['#multiple']) {
    $element['#type'] = 'checkboxes';
    // Non-required checkboxes need no '<none>' choice
    if (!$element['#required']) {
      unset($element['#options'][0]);
    }
    // Reprocess every single checkbox to allow for advanced theming
    $element['#process'] = array('_formtweaker_expand_checkboxes' => array());
  } else {
    $element['#type'] = 'radios';
    $element['#default_value'] = $element['#default_value'][0];
    // Non-required radios do need a '<none>' choice
    if (!$element['#required']) {
      $element['#options'][0] = '&lsaquo;' . t('none') . '&rsaquo;';
    }
    // Reprocess every single radio to allow for advanced theming
    $element['#process'] = array('_formtweaker_expand_radios' => array());
  }
  
  unset($element['#theme']);
  
  return $element;
}  
  
function _formtweaker_obj2arr($oldoptions) {
  $newoptions = array();
  foreach ($oldoptions as $arrkey => $arrchoice) {
    if (is_object($arrchoice)) {
      foreach ($arrchoice->option as $objkey => $objchoice) {
        $newoptions[$objkey] = $objchoice;
      }
    } else {
        $newoptions[$arrkey] = $arrchoice;
    }
  }
  return $newoptions;
}

function _formtweaker_expand_checkboxes($thiselement) {
  $value = is_array($thiselement['#value']) ? $thiselement['#value'] : array();
  $thiselement['#tree'] = TRUE;
  if (count($thiselement['#options']) > 0) {
    foreach ($thiselement['#options'] as $key => $choice) {
      if (!isset($thiselement[$key])) {
        $tchoice = ltrim($choice, '-');
        $depth = strlen($choice) - strlen($tchoice);
        $thiselement[$key] = array(
          '#type' => 'checkbox',
          '#title' => $tchoice,
          '#prefix' => '<div style="margin-left: ' . (20 * $depth) . 'px">',
          '#suffix' => '</div>',
          '#return_value' => $key,
          '#default_value' => isset($value[$key]),
          '#attributes' => $thiselement['#attributes'],
          '#processed' => TRUE,
        );
      }
    }
  }
  return $thiselement;
}

function _formtweaker_expand_radios($thiselement) {
  if (count($thiselement['#options']) > 0) {
    foreach ($thiselement['#options'] as $key => $choice) {
      if (!isset($thiselement[$key])) {
        $tchoice = ltrim($choice, '-');
        $depth = strlen($choice) - strlen($tchoice);
        $thiselement[$key] = array(
          '#type' => 'radio',
          '#title' => $tchoice,
          '#prefix' => '<div style="margin-left: ' . (20 * $depth) . 'px">',
          '#suffix' => '</div>',
          '#return_value' => $key,
          '#default_value' => $thiselement['#default_value'],
          '#attributes' => $thiselement['#attributes'],
          '#parents' => $thiselement['#parents'],
          '#spawned' => TRUE,
        );
      }
    }
  }
  return $thiselement;
}
