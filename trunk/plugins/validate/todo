event architecture draft
------------------------

Goal: Improve performance for big forms, simplify adding and removing elements from valiated forms.

Idea: Use event delegation and handle all necessary events on the form, registering event handlers there, not on each element.

Problem to solve: Neither blur nor focus bubble up to its parent form. Change, keyup and mouseup do, but change isn't triggered
by browsers built-in autocomplete.

Possible solution: Set an interval that checks all elements on the form for changes, triggering an appropiate event then (eg. change).
The event must be triggered on the form with the element as the target. Use jQuery.event.fix({type: "change", target: this}) to create the
event object, and use $(this.form).triggerHandler("change", event) to trigger the event and pass through the event object.
The bubbled keyup and mouseup events could be used to determine which elements actually have focus.
The interval must be small enough to give feedback fast enough. It could be a good thing to have it react a bit slower then usual onblur-validation,
to avoid the tab-POW-reaction (though that is better solved with appropiate layouts and fadeins).

Things to keep in mind while testing: Focus event is currently used to rememeber the last focused elements. That must continue to work.
Profiling should be done with a form with about 100 elements, which isn't that unusual.

Notes:
 - while checking that stuff anyway, consider binding per-element-stuff directly to the element using jQuery's data API
 - check if the loop over form.elements inside the interval has to do any filtering (eg. disabled, hidden, buttons), or if that can be filtered at a later stage anyway

css references
--------------
- http://test5.caribmedia.com/CSS/Secrets/members/michiel/floating-forms.html
- http://paularmstrongdesigns.com/projects/awesomeform/

other stuff
-----------

- consider validation on page load, disabling required-checks
- check value != defaultValue in required, making defaultValue invalid
- test and document and demo Scott's class-rules module
- bug in marketo demo, keeps showing error for "email already taken", even if server returns true
- bug in testsuite in IE6, normal form submit kills it
- completely rework showErrors: manually settings errors is currently extremely flawed and utterly useless, eg. errors disappear if some other validation is triggered
- use remote response as message if available, eg. check for type String
- add custom event to remote validation for adding more parameters
- submitting a form where only remote validation is left to run sometimes calls submitHandler/submit after the field got fixed
- add proper support for more states: valid, invalid, optional, pending...
- add custom events for form and elements instead of more callbacks
- improve validator API: validator.check(Element inputOrForm) instead of form and element methods, doing validate().form() is crap anyway
- try to replace element handling on each input with event delegation handled by the form
	-> complicates handling the event, but improves adding/removing handlers a ton, refresh() doesn't have to do anything for events, adding and removing elements from the form is priceless
	-> while at it, improve event handling for selects
	-> while at it, try to add onchange: integrates nicely with eg. datepicker (which fires a change event) 
- add support for dynamic params, that is, check if the specified parameter (if relevant at all, eg. maxValue) is a function, then execute it and use the return value

- document focusInvalid()
- document validation lifecycle: setup (add event handlers), run validation (prepare form, validate elements, display errors/submit form)
	 -> show where the user can hook in via callbacks
	 
- AND depedency: specify multiple expressions as an array

additional options/callbacks:
- onsubmit: Boolean, default true - validate on form submit (similar to onkeyup/onblur)
- beforeValidation: Callback, called before doing any validation
- beforeSubmit: Callback, called before submitting the form (default submit or calling submitHandler, if specified) 

- bug: refresh now adds also key events in general, but doesn't for partial refreshs, and it should replace them if already present, instead of adding the same handler again and again
- bug: remote validation triggers display/validation of other fields

- add test and a tab-example for subformRequired
- document invalidHandler
- document all those event options
- is that element == lastElement check in the onblur handler really useful?

- performance tuning: add about 100 fields to custom-method-demo and profile IE
- oninvalid/invalidSubmitHandler: called after a form is validated on submit and its invalid
- removing messages by specifying null or an empty string doesn't work as it defaults to the default message. improve that check
- animations!!
- ajax validation:
	- in combination with autocomplete (mustmatch company name, fill out address details, validate required)
	- validate zip code in comparison to address, if match and state is missing, fill out state
- strong password check/integration: http://phiras.wordpress.com/2007/04/08/password-strength-meter-a-jquery-plugin/
- add/modify onkeyup option: true - immediate, false - none, default - filtered

- validate on paste:

I'm going to assume that you have some validate function
"checkVal".

input.blur(checkVal);

if ($.browser.msie)
 this.onpaste= function(){setTimeout(checkVal,0);};
else if ($.browser.mozilla)
 this.addEventListener('input',checkVal,false);

- custom-methods-demo.html enable summary container, currently broken, is updated too often
- stop firefox password manager to popup before validation - very very difficult

8 Sijawusz Pur Rahnama, 12:30: first of all, it would be handy to have some hideError(s) method
8 Sijawusz Pur Rahnama, 12:31: the second thing is to provide some sort of ids not constrained only to DOM tree
8 Sijawusz Pur Rahnama, 12:32: it can be achieved by sniffing some character on a front of id
8 Sijawusz Pur Rahnama, 12:32: like # for example
8 Sijawusz Pur Rahnama, 12:33: by this, we'll be able to set some custom errors not strictly related to our form
8 Sijawusz Pur Rahnama, 12:33: for example
8 Sijawusz Pur Rahnama, 12:34: validator.setErrors({ '#broken_connection': 'There was a problem with connection, try again later' });
8 Sijawusz Pur Rahnama, 12:35: and later we could use validator.hideError('#broken_connection');

 Examples:
 - wordpress comment form, make it a drop-in method
 - ajax: captcha validation ( http://psyrens.com/captcha/ )
 - ajaxForm() integration
 - ajaxSubmit with rules-option, more/less options to ajaxSubmit
 - watermark integration http://digitalbush.com/projects/watermark-input-plugin
 - datepicker integration (see dobis)
 - timepicker integration ( http://labs.perifer.se/timedatepicker/ ) 
 - integration with CakePHP ( https://trac.cakephp.org/ticket/2359 )
 - integration with tabs: http://www.netix.sk/forms/test.html 
 - intergration with rich-text-editors (FCKEditor, TinyMCE, Codepress)
 -> In simple terms, you need to "move" the content from the TinyMCE
control to the textarea for validation.

$('button.save').click(function(){
	if (tinyMCE) tinyMCE.triggerSave();
});
http://wiki.moxiecode.com/index.php/TinyMCE:Functions#tinyMCE.triggerSave
 
http://www.fyneworks.com/jquery/FCKEditor/
